version: '3.8'

services:
  backend:
    container_name: "pfartists_back_${ENV_MODE}"
    image: "pfartists_back_${ENV_MODE}:0.9.3"
    environment:
      NODE_ENV: ${ENV_MODE}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_DB_PORT}/${POSTGRES_DB_NAME}?schema=public&sslmode=prefer
      AMAZON_ACCESS_KEY: ${AMAZON_ACCESS_KEY}
      AMAZON_SECRET_ACCESS_KEY: ${AMAZON_SECRET_ACCESS_KEY}
      AMAZON_REGION: ${AMAZON_REGION}
      AMAZON_BUCKET: ${AMAZON_BUCKET}
      S3_URL: ${S3_URL}
      APP_NAME: ${APP_NAME}
      WEB_DOMAIN: ${WEB_DOMAIN}
      API_DOMAIN: ${API_DOMAIN}
      SUPERTOKENS_DOMAIN: ${SUPERTOKENS_DOMAIN}
      DASHBOARD_KEY: ${DASHBOARD_KEY}
      CONFIRM_TEMPLATE_ID: ${CONFIRM_TEMPLATE_ID}
      FORGOTTEN_PASSWORD_TEMPLATE_ID: ${FORGOTTEN_PASSWORD_TEMPLATE_ID}
      NO_REPLY_EMAIL: ${NO_REPLY_EMAIL}
      SUPPORT_EMAIL: ${SUPPORT_EMAIL}
      GOOGLE_ID: ${GOOGLE_ID}
      GOOGLE_SECRET_ID: ${GOOGLE_SECRET_ID}
      GOOGLE_TOKEN_URL: ${GOOGLE_TOKEN_URL}
      GOOGLE_AUTHORIZE_REDIRECT_URL: ${GOOGLE_AUTHORIZE_REDIRECT_URL}
      SPOTIFY_ID: ${SPOTIFY_ID}
      SPOTIFY_SECRET_ID: ${SPOTIFY_SECRET_ID}
      SPOTIFY_TOKEN_URL: ${SPOTIFY_TOKEN_URL}
      SPOTIFY_AUTHORIZE_REDIRECT_URL: ${SPOTIFY_AUTHORIZE_REDIRECT_URL}
      DISCORD_ID: ${DISCORD_ID}
      DISCORD_SECRET_ID: ${DISCORD_SECRET_ID}
      DISCORD_TOKEN_URL: ${DISCORD_TOKEN_URL}
      DISCORD_AUTHORIZE_REDIRECT_URL: ${DISCORD_AUTHORIZE_REDIRECT_URL}
      LINE_ID: ${LINE_ID}
      LINE_SECRET_ID: ${LINE_SECRET_ID}
      LINE_TOKEN_URL: ${LINE_TOKEN_URL}
      LINE_AUTHORIZE_REDIRECT_URL: ${LINE_AUTHORIZE_REDIRECT_URL}
      MAILERSEND_API_KEY: ${MAILERSEND_API_KEY}
    depends_on:
      - db
      - redis
      - supertokens
    build:
      context: ./backend
      dockerfile: Dockerfile.${ENV_MODE}
    ports:
      - ${BACKEND_PORT}:${BACKEND_PORT}
    networks: 
      - net
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  db:
    container_name: db
    image: postgres:14.6-bullseye
    networks:
      - net
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB_NAME}
    volumes:
      - PG_DATA:/var/lib/postgresql/data
    ports:
      - ${POSTGRES_DB_PORT}:${POSTGRES_DB_PORT}
    restart: unless-stopped
    healthcheck:
      test: [ 'CMD', "pg_isready" ]
      interval: 5s
      timeout: 5s
      retries: 5

  pgadmin:
    links:
      - db
    container_name: pgadmin
    image: dpage/pgadmin4:6.19
    volumes:
      - ./pgdata/pgadmin:/root/.pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGA_DEF_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGA_DEF_PASS}
    networks:
      - net

  nginx:
    container_name: nginx
    image: nginx:1.23.3
    volumes:
      - ./nginx/templates:/etc/nginx/templates
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    environment:
      - NGINX_PORT=${NGINX_PORT}
      - BACKEND_PORT=${BACKEND_PORT}
    ports:
      - 80:${NGINX_PORT}
    depends_on:
      - backend
      - db
      - redis
      - supertokens
    networks:
      - net

  redis:
    container_name: redis
    image: redis:7.0.8-bullseye
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    networks:
      - net
      
  supertokens:
    container_name: "supertokens"
    image: registry.supertokens.io/supertokens/supertokens-postgresql:4.3
    depends_on:
      db:
        condition: service_healthy
    ports:
      - ${SUPERTOKENS_PORT}:${SUPERTOKENS_PORT}
    environment:
      POSTGRESQL_CONNECTION_URI: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_DB_PORT}/${POSTGRES_DB_NAME}?schema=public&sslmode=prefer
    networks:
      - net
    restart: unless-stopped
    healthcheck:
      test: >
        bash -c 'exec 3<>/dev/tcp/${HOST}/${SUPERTOKENS_PORT} && echo -e "GET /hello HTTP/1.1\r\nhost: 1${HOST}:${SUPERTOKENS_PORT}\r\nConnection: close\r\n\r\n" >&3 && cat <&3 | grep "Hello"'
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  net:

volumes:
  PG_DATA:
    driver: local
