generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                     String               @default(uuid()) @id
  username               String?              @db.VarChar(20)
  pseudonym              String?              @db.VarChar(30) @unique
  email                  String               @db.VarChar(50) @unique
  password               String
  description            String?              @db.VarChar(300)
  profilePhoto           String?              @db.VarChar(200) @unique
  createAt               DateTime             @default(now())
  updateAt               DateTime             @updatedAt
  plan                   Plan                 @default(FREE)
  emailpassword_users    emailpassword_users  @relation(fields: [id], references: [user_id])
  owner                  Groups?              @relation("owner")
  moderator              Groups[]             @relation("moderator")
  user                   Groups[]
  profile                Files?               @relation("profile")
  ownerFile              Files?               @relation("ownerFile")
  friend                 Friends[]
  userInFriend           Friends[]            @relation("usersFriends")
}

model Groups {
  groupId                String               @default(uuid()) @id
  name                   String               @db.VarChar(20) @unique
  description            String               @db.VarChar(300)
  adminId                String               @db.VarChar(36) @unique
  moderatorsId           String?              @db.VarChar(36)
  usersId                String?              @db.VarChar(36)
  logoUrl                String?              @db.VarChar(36)
  createAt               DateTime             @default(now())
  updateAt               DateTime             @updatedAt
  owner                  Users                @relation("owner", fields: [adminId], references: [id])
  moderator              Users?               @relation("moderator", fields: [moderatorsId], references: [id])
  user                   Users?               @relation(fields: [usersId], references: [id])
}

model Friends {
  id                     String               @default(uuid()) @id
  usernameId             String               @db.VarChar(80)
  friendId               String               @db.VarChar(80)
  favorite               Boolean              @default(false)
  createAt               DateTime             @default(now())
  updateAt               DateTime             @updatedAt
  friend                 Users                @relation(fields: [friendId], references: [id])
  usersFriends           Users                @relation("usersFriends", fields: [usernameId], references: [id])
}

model Files {
  id                     String               @default(uuid()) @id
  name                   String               @db.VarChar(120) @unique
  ownerFile              String               @db.VarChar(80) @unique
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  profileType            Boolean              @default(false)
  profile                Users                @relation("profile", fields: [id], references: [profilePhoto])
  owner                  Users                @relation("ownerFile", fields: [ownerFile], references: [id])
}

model all_auth_recipe_users {
  user_id                String               @db.Char(36) @id
  recipe_id              String               @db.VarChar(128)
  time_joined            BigInt
  userid_mapping         userid_mapping?

  @@index([time_joined(sort: Desc), user_id(sort: Desc)], map: "all_auth_recipe_users_pagination_index")
}

model emailpassword_pswd_reset_tokens {
  user_id                String               @db.Char(36)
  token                  String               @unique @db.VarChar(128)
  token_expiry           BigInt
  emailpassword_users    emailpassword_users  @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@id([user_id, token])
  @@index([token_expiry], map: "emailpassword_password_reset_token_expiry_index")
}

model emailpassword_users {
  user_id                         String                            @db.Char(36) @id
  email                           String                            @db.VarChar(256) @unique
  password_hash                   String                            @db.VarChar(256)
  time_joined                     BigInt
  emailpassword_pswd_reset_tokens emailpassword_pswd_reset_tokens[]
  users                           Users?
}

model emailverification_tokens {
  user_id                String               @db.VarChar(128)
  email                  String               @db.VarChar(256)
  token                  String               @db.VarChar(128) @unique
  token_expiry           BigInt

  @@id([user_id, email, token])
  @@index([token_expiry], map: "emailverification_tokens_index")
}

model emailverification_verified_emails {
  user_id                String               @db.VarChar(128)
  email                  String               @db.VarChar(256)

  @@id([user_id, email])
}

model jwt_signing_keys {
  key_id                 String               @db.VarChar(255) @id
  key_string             String
  algorithm              String               @db.VarChar(10)
  created_at             BigInt?
}

model key_value {
  name                   String               @db.VarChar(128) @id
  value                  String?
  created_at_time        BigInt?
}

model passwordless_codes {
  code_id                String               @db.Char(36) @id
  device_id_hash         String               @db.Char(44)
  link_code_hash         String               @db.Char(44) @unique
  created_at             BigInt
  passwordless_devices   passwordless_devices @relation(fields: [device_id_hash], references: [device_id_hash], onDelete: Cascade)

  @@index([created_at], map: "passwordless_codes_created_at_index")
  @@index([device_id_hash], map: "passwordless_codes_device_id_hash_index")
}

model passwordless_devices {
  device_id_hash         String               @db.Char(44) @id
  email                  String?              @db.VarChar(256)
  phone_number           String?              @db.VarChar(256)
  link_code_salt         String               @db.Char(44)
  failed_attempts        Int
  passwordless_codes     passwordless_codes[]

  @@index([email], map: "passwordless_devices_email_index")
  @@index([phone_number], map: "passwordless_devices_phone_number_index")
}

model passwordless_users {
  user_id                String               @db.Char(36) @id
  email                  String?              @db.VarChar(256) @unique
  phone_number           String?              @db.VarChar(256) @unique
  time_joined            BigInt
}

model role_permissions {
  role                   String               @db.VarChar(255)
  permission             String               @db.VarChar(255)
  roles                  roles                @relation(fields: [role], references: [role], onDelete: Cascade, onUpdate: NoAction)

  @@id([role, permission])
  @@index([permission], map: "role_permissions_permission_index")
}

model roles {
  role                   String               @db.VarChar(255) @id
  role_permissions       role_permissions[]
  user_roles             user_roles[]
}

model session_access_token_signing_keys {
  created_at_time        BigInt               @id
  value                  String?
}

model session_info {
session_handle           String               @db.VarChar(255) @id
  user_id                String               @db.VarChar(128)
  refresh_token_hash_2   String               @db.VarChar(128)
  session_data           String?
  expires_at             BigInt
  created_at_time        BigInt
  jwt_user_payload       String?
}

model thirdparty_users {
  third_party_id         String               @db.VarChar(28)
  third_party_user_id    String               @db.VarChar(256)
  user_id                String               @db.Char(36) @unique
  email                  String               @db.VarChar(256)
  time_joined            BigInt

  @@id([third_party_id, third_party_user_id])
}

model user_metadata {
  user_id                String               @db.VarChar(128) @id
  user_metadata          String
}

model user_roles {
  user_id                String               @db.VarChar(128)
  role                   String               @db.VarChar(255)
  roles                  roles                @relation(fields: [role], references: [role], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, role])
  @@index([role], map: "user_roles_role_index")
}

model userid_mapping {
  supertokens_user_id   String                @db.Char(36) @unique
  external_user_id      String                @db.VarChar(128) @unique
  external_user_id_info String?
  all_auth_recipe_users all_auth_recipe_users @relation(fields: [supertokens_user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([supertokens_user_id, external_user_id])
}

enum Plan {
  FREE
  PREMIUM
  GOLD
}
