generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Plan {
  FREE
  PREMIUM
  GOLD
}

enum Role {
  ADMIN
  MODERATOR
  USER
  AUTHOR
}

enum Tags {
  realistic
  manga
  anime
  comics
  photographs
  videos
  animations
  others
  profile
}

model Roles {
  roleId        String          @id @default(uuid())
  type          Role            @unique
  usersGroups   UsersGroups[]
  comments      Comments[]
  filesComments FilesComments[]
  subComments   SubComments[]
  lastComments  LastComments[]
}

model Users {
  id                    String                @id
  username              String?               @db.VarChar(20)
  pseudonym             String?               @unique @db.VarChar(30)
  description           String?               @db.VarChar(300)
  profilePhoto          String?               @unique @db.VarChar(200)
  plan                  Plan                  @default(FREE)
  updatedAt             DateTime              @updatedAt
  all_auth_recipe_users all_auth_recipe_users @relation(fields: [id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
  userAsFriend          Friends[]             @relation("usersFriends")
  profile               Files?                @relation("profile")
  usersGroups           UsersGroups[]
  comments              Comments[]
  subComments           SubComments[]
  lastComments          LastComments[]
  liked                 Liked[]
  friends               Friends[]
  files                 Files[]
  filesComments         FilesComments[]
  posts                 Posts[]
}

model Friends {
  id           String   @id @default(uuid())
  usernameId   String   @db.VarChar(80)
  friendId     String   @db.VarChar(80)
  favorite     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  friends      Users    @relation(fields: [friendId], references: [id])
  userAsFriend Users    @relation(fields: [usernameId], references: [id], "usersFriends")
}

model Files {
  fileId           String          @id @default(uuid())
  name             String          @unique @db.VarChar(120)
  shortDescription String?         @db.VarChar(100)
  tags             Tags
  profileType      Boolean         @default(false)
  authorId         String          @db.VarChar(36)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  users            Users           @relation(fields: [authorId], references: [id])
  profile          Users           @relation(fields: [name], references: [profilePhoto], "profile")
  comments         FilesComments[]
}

model Groups {
  groupId     String        @id @default(uuid())
  name        String        @unique @db.VarChar(20)
  description String        @db.VarChar(300)
  regulation  String?       @db.VarChar(1000)
  logo        String?       @db.VarChar(36)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  usersGroups UsersGroups[]
  posts       Posts[]
}

model UsersGroups {
  usersGroupsId String   @id @default(uuid())
  name          String   @db.VarChar(20)
  groupId       String   @db.VarChar(36)
  userId        String   @db.VarChar(36)
  roleId        String   @db.VarChar(36)
  favorite      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  users         Users    @relation(fields: [userId], references: [id])
  groups        Groups   @relation(fields: [groupId], references: [groupId])
  roles         Roles[]
}

model Posts {
  postId    String     @id @default(uuid())
  title     String     @unique @db.VarChar(80)
  content   String     @db.VarChar(400)
  authorId  String     @db.VarChar(36)
  groupId   String     @db.VarChar(36)
  commented Int        @default(0)
  likes     Int        @default(0)
  shared    Int        @default(0)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  users     Users      @relation(fields: [authorId], references: [id])
  groups    Groups     @relation(fields: [groupId], references: [groupId])
  comments  Comments[]
  liked     Liked[]
}

model Liked {
  id     String  @id @default(uuid())
  postId String  @db.VarChar(36)
  userId String  @db.VarChar(36)
  posts  Posts   @relation(fields: [postId], references: [postId])
  users  Users[]
}

model Comments {
  commentId   String        @id @default(uuid())
  comment     String        @db.VarChar(1000)
  authorId    String        @db.VarChar(36)
  postId      String        @db.VarChar(36)
  role        Role
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  users       Users         @relation(fields: [authorId], references: [id])
  posts       Posts         @relation(fields: [postId], references: [postId])
  roles       Roles         @relation(fields: [role], references: [type])
  subComments SubComments[]
}

model FilesComments {
  id          String        @id @default(uuid())
  fileId      String        @db.VarChar(36)
  comment     String        @db.VarChar(1000)
  authorId    String        @db.VarChar(36)
  role        Role
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  files       Files         @relation(fields: [fileId], references: [fileId])
  users       Users         @relation(fields: [authorId], references: [id])
  roles       Roles         @relation(fields: [role], references: [type])
  subComments SubComments[]
}

model SubComments {
  subCommentId  String         @id @default(uuid())
  commentId     String?        @db.VarChar(36)
  subComment    String         @db.VarChar(1000)
  authorId      String         @db.VarChar(36)
  fileCommentId String?        @db.VarChar(36)
  role          Role
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  comments      Comments?      @relation(fields: [commentId], references: [commentId])
  lastComments  LastComments[]
  users         Users          @relation(fields: [authorId], references: [id])
  filesComments FilesComments? @relation(fields: [fileCommentId], references: [id])
  roles         Roles          @relation(fields: [role], references: [type])
}

model LastComments {
  lastCommentId String      @id @default(uuid())
  subCommentId  String      @db.VarChar(36)
  lastComment   String      @db.VarChar(1000)
  authorId      String      @db.VarChar(36)
  role          Role
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  subComments   SubComments @relation(fields: [subCommentId], references: [subCommentId])
  users         Users?      @relation(fields: [authorId], references: [id])
  roles         Roles       @relation(fields: [role], references: [type])
}

model all_auth_recipe_users {
  app_id                       String                        @default("public") @db.VarChar(64)
  tenant_id                    String                        @default("public") @db.VarChar(64)
  user_id                      String                        @unique @db.Char(36)
  recipe_id                    String                        @db.VarChar(128)
  time_joined                  BigInt
  tenants                      tenants                       @relation(fields: [app_id, tenant_id], references: [app_id, tenant_id], onDelete: Cascade, onUpdate: NoAction, map: "all_auth_recipe_users_tenant_id_fkey")
  app_id_to_user_id            app_id_to_user_id             @relation(fields: [app_id, user_id], references: [app_id, user_id], onDelete: Cascade, onUpdate: NoAction, map: "all_auth_recipe_users_user_id_fkey")
  users                        Users?
  emailpassword_user_to_tenant emailpassword_user_to_tenant?
  passwordless_user_to_tenant  passwordless_user_to_tenant?
  thirdparty_user_to_tenant    thirdparty_user_to_tenant?

  @@id([app_id, tenant_id, user_id])
  @@index([time_joined(sort: Desc), user_id(sort: Desc), tenant_id(sort: Desc), app_id(sort: Desc)], map: "all_auth_recipe_users_pagination_index")
  @@index([app_id, tenant_id], map: "all_auth_recipe_tenant_id_index")
  @@index([app_id, user_id], map: "all_auth_recipe_user_id_index")
}

model emailpassword_pswd_reset_tokens {
  app_id              String              @default("public") @db.VarChar(64)
  user_id             String              @db.Char(36)
  token               String              @unique @db.VarChar(128)
  token_expiry        BigInt
  emailpassword_users emailpassword_users @relation(fields: [app_id, user_id], references: [app_id, user_id], onDelete: Cascade, map: "emailpassword_pswd_reset_tokens_user_id_fkey")

  @@id([app_id, user_id, token])
  @@index([token_expiry], map: "emailpassword_password_reset_token_expiry_index")
  @@index([app_id, user_id], map: "emailpassword_pswd_reset_tokens_user_id_index")
}

model emailpassword_users {
  app_id                          String                            @default("public") @db.VarChar(64)
  user_id                         String                            @db.Char(36)
  email                           String                            @db.VarChar(256)
  password_hash                   String                            @db.VarChar(256)
  time_joined                     BigInt
  emailpassword_pswd_reset_tokens emailpassword_pswd_reset_tokens[]
  app_id_to_user_id               app_id_to_user_id                 @relation(fields: [app_id, user_id], references: [app_id, user_id], onDelete: Cascade, onUpdate: NoAction, map: "emailpassword_users_user_id_fkey")

  @@id([app_id, user_id])
}

model emailverification_tokens {
  app_id       String  @default("public") @db.VarChar(64)
  tenant_id    String  @default("public") @db.VarChar(64)
  user_id      String  @db.VarChar(128)
  email        String  @db.VarChar(256)
  token        String  @unique @db.VarChar(128)
  token_expiry BigInt
  tenants      tenants @relation(fields: [app_id, tenant_id], references: [app_id, tenant_id], onDelete: Cascade, onUpdate: NoAction, map: "emailverification_tokens_tenant_id_fkey")

  @@id([app_id, tenant_id, user_id, email, token])
  @@index([token_expiry], map: "emailverification_tokens_index")
  @@index([app_id, tenant_id], map: "emailverification_tokens_tenant_id_index")
}

model emailverification_verified_emails {
  app_id  String @default("public") @db.VarChar(64)
  user_id String @db.VarChar(128)
  email   String @db.VarChar(256)
  apps    apps   @relation(fields: [app_id], references: [app_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([app_id, user_id, email])
  @@index([app_id], map: "emailverification_verified_emails_app_id_index")
}

model jwt_signing_keys {
  app_id     String  @default("public") @db.VarChar(64)
  key_id     String  @db.VarChar(255)
  key_string String
  algorithm  String  @db.VarChar(10)
  created_at BigInt?
  apps       apps    @relation(fields: [app_id], references: [app_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([app_id, key_id])
  @@index([app_id], map: "jwt_signing_keys_app_id_index")
}

model key_value {
  app_id          String  @default("public") @db.VarChar(64)
  tenant_id       String  @default("public") @db.VarChar(64)
  name            String  @db.VarChar(128)
  value           String?
  created_at_time BigInt?
  tenants         tenants @relation(fields: [app_id, tenant_id], references: [app_id, tenant_id], onDelete: Cascade, onUpdate: NoAction, map: "key_value_tenant_id_fkey")

  @@id([app_id, tenant_id, name])
  @@index([app_id, tenant_id], map: "key_value_tenant_id_index")
}

model passwordless_codes {
  app_id               String               @default("public") @db.VarChar(64)
  tenant_id            String               @default("public") @db.VarChar(64)
  code_id              String               @db.Char(36)
  device_id_hash       String               @db.Char(44)
  link_code_hash       String               @db.Char(44)
  created_at           BigInt
  passwordless_devices passwordless_devices @relation(fields: [app_id, tenant_id, device_id_hash], references: [app_id, tenant_id, device_id_hash], onDelete: Cascade, map: "passwordless_codes_device_id_hash_fkey")

  @@id([app_id, tenant_id, code_id])
  @@unique([app_id, tenant_id, link_code_hash], map: "passwordless_codes_link_code_hash_key")
  @@index([app_id, tenant_id, created_at], map: "passwordless_codes_created_at_index")
  @@index([app_id, tenant_id, device_id_hash], map: "passwordless_codes_device_id_hash_index")
}

model passwordless_devices {
  app_id             String               @default("public") @db.VarChar(64)
  tenant_id          String               @default("public") @db.VarChar(64)
  device_id_hash     String               @db.Char(44)
  email              String?              @db.VarChar(256)
  phone_number       String?              @db.VarChar(256)
  link_code_salt     String               @db.Char(44)
  failed_attempts    Int
  passwordless_codes passwordless_codes[]
  tenants            tenants              @relation(fields: [app_id, tenant_id], references: [app_id, tenant_id], onDelete: Cascade, onUpdate: NoAction, map: "passwordless_devices_tenant_id_fkey")

  @@id([app_id, tenant_id, device_id_hash])
  @@index([app_id, tenant_id, email], map: "passwordless_devices_email_index")
  @@index([app_id, tenant_id, phone_number], map: "passwordless_devices_phone_number_index")
  @@index([app_id, tenant_id], map: "passwordless_devices_tenant_id_index")
}

model passwordless_users {
  app_id            String            @default("public") @db.VarChar(64)
  user_id           String            @db.Char(36)
  email             String?           @db.VarChar(256)
  phone_number      String?           @db.VarChar(256)
  time_joined       BigInt
  app_id_to_user_id app_id_to_user_id @relation(fields: [app_id, user_id], references: [app_id, user_id], onDelete: Cascade, onUpdate: NoAction, map: "passwordless_users_user_id_fkey")

  @@id([app_id, user_id])
}

model role_permissions {
  app_id     String @default("public") @db.VarChar(64)
  role       String @db.VarChar(255)
  permission String @db.VarChar(255)
  roles      roles  @relation(fields: [app_id, role], references: [app_id, role], onDelete: Cascade, onUpdate: NoAction, map: "role_permissions_role_fkey")

  @@id([app_id, role, permission])
  @@index([app_id, permission], map: "role_permissions_permission_index")
  @@index([app_id, role], map: "role_permissions_role_index")
}

model roles {
  app_id           String             @default("public") @db.VarChar(64)
  role             String             @db.VarChar(255)
  role_permissions role_permissions[]
  apps             apps               @relation(fields: [app_id], references: [app_id], onDelete: Cascade, onUpdate: NoAction)
  user_roles       user_roles[]

  @@id([app_id, role])
  @@index([app_id], map: "roles_app_id_index")
}

model session_access_token_signing_keys {
  app_id          String  @default("public") @db.VarChar(64)
  created_at_time BigInt
  value           String?
  apps            apps    @relation(fields: [app_id], references: [app_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([app_id, created_at_time])
  @@index([app_id], map: "access_token_signing_keys_app_id_index")
}

model session_info {
  app_id               String  @default("public") @db.VarChar(64)
  tenant_id            String  @default("public") @db.VarChar(64)
  session_handle       String  @db.VarChar(255)
  user_id              String  @db.VarChar(128)
  refresh_token_hash_2 String  @db.VarChar(128)
  session_data         String?
  expires_at           BigInt
  created_at_time      BigInt
  jwt_user_payload     String?
  use_static_key       Boolean
  tenants              tenants @relation(fields: [app_id, tenant_id], references: [app_id, tenant_id], onDelete: Cascade, onUpdate: NoAction, map: "session_info_tenant_id_fkey")

  @@id([app_id, tenant_id, session_handle])
  @@index([expires_at], map: "session_expiry_index")
  @@index([app_id, tenant_id], map: "session_info_tenant_id_index")
}

model thirdparty_users {
  app_id              String            @default("public") @db.VarChar(64)
  third_party_id      String            @db.VarChar(28)
  third_party_user_id String            @db.VarChar(256)
  user_id             String            @db.Char(36)
  email               String            @db.VarChar(256)
  time_joined         BigInt
  app_id_to_user_id   app_id_to_user_id @relation(fields: [app_id, user_id], references: [app_id, user_id], onDelete: Cascade, onUpdate: NoAction, map: "thirdparty_users_user_id_fkey")

  @@id([app_id, user_id])
  @@index([app_id, email], map: "thirdparty_users_email_index")
  @@index([app_id, third_party_id, third_party_user_id], map: "thirdparty_users_thirdparty_user_id_index")
}

model user_metadata {
  app_id        String @default("public") @db.VarChar(64)
  user_id       String @db.VarChar(128)
  user_metadata String
  apps          apps   @relation(fields: [app_id], references: [app_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([app_id, user_id])
  @@index([app_id], map: "user_metadata_app_id_index")
}

model user_roles {
  app_id    String  @default("public") @db.VarChar(64)
  tenant_id String  @default("public") @db.VarChar(64)
  user_id   String  @db.VarChar(128)
  role      String  @db.VarChar(255)
  roles     roles   @relation(fields: [app_id, role], references: [app_id, role], onDelete: Cascade, onUpdate: NoAction, map: "user_roles_role_fkey")
  tenants   tenants @relation(fields: [app_id, tenant_id], references: [app_id, tenant_id], onDelete: Cascade, onUpdate: NoAction, map: "user_roles_tenant_id_fkey")

  @@id([app_id, tenant_id, user_id, role])
  @@index([app_id, tenant_id, role], map: "user_roles_role_index")
  @@index([app_id, role], map: "user_roles_app_id_role_index")
  @@index([app_id, tenant_id], map: "user_roles_tenant_id_index")
}

model userid_mapping {
  app_id                String            @default("public") @db.VarChar(64)
  supertokens_user_id   String            @db.Char(36)
  external_user_id      String            @db.VarChar(128)
  external_user_id_info String?
  app_id_to_user_id     app_id_to_user_id @relation(fields: [app_id, supertokens_user_id], references: [app_id, user_id], onDelete: Cascade, onUpdate: NoAction, map: "userid_mapping_supertokens_user_id_fkey")

  @@id([app_id, supertokens_user_id, external_user_id])
  @@unique([app_id, supertokens_user_id], map: "userid_mapping_supertokens_user_id_key")
  @@unique([app_id, external_user_id], map: "userid_mapping_external_user_id_key")
  @@index([app_id, supertokens_user_id], map: "userid_mapping_supertokens_user_id_index")
}

model app_id_to_user_id {
  app_id                String                  @default("public") @db.VarChar(64)
  user_id               String                  @db.Char(36)
  recipe_id             String                  @db.VarChar(128)
  all_auth_recipe_users all_auth_recipe_users[]
  apps                  apps                    @relation(fields: [app_id], references: [app_id], onDelete: Cascade, onUpdate: NoAction)
  emailpassword_users   emailpassword_users?
  passwordless_users    passwordless_users?
  thirdparty_users      thirdparty_users?
  userid_mapping        userid_mapping?

  @@id([app_id, user_id])
  @@index([app_id], map: "app_id_to_user_id_app_id_index")
}

model apps {
  app_id                            String                              @id @default("public") @db.VarChar(64)
  created_at_time                   BigInt?
  app_id_to_user_id                 app_id_to_user_id[]
  dashboard_users                   dashboard_users[]
  emailverification_verified_emails emailverification_verified_emails[]
  jwt_signing_keys                  jwt_signing_keys[]
  roles                             roles[]
  session_access_token_signing_keys session_access_token_signing_keys[]
  tenants                           tenants[]
  totp_users                        totp_users[]
  user_last_active                  user_last_active[]
  user_metadata                     user_metadata[]
}

model tenant_configs {
  connection_uri_domain       String                        @default("") @db.VarChar(256)
  app_id                      String                        @default("public") @db.VarChar(64)
  tenant_id                   String                        @default("public") @db.VarChar(64)
  core_config                 String?
  email_password_enabled      Boolean?
  passwordless_enabled        Boolean?
  third_party_enabled         Boolean?
  tenant_thirdparty_providers tenant_thirdparty_providers[]

  @@id([connection_uri_domain, app_id, tenant_id])
}

model tenant_thirdparty_provider_clients {
  connection_uri_domain       String                      @default("") @db.VarChar(256)
  app_id                      String                      @default("public") @db.VarChar(64)
  tenant_id                   String                      @default("public") @db.VarChar(64)
  third_party_id              String                      @db.VarChar(28)
  client_type                 String                      @default("") @db.VarChar(64)
  client_id                   String                      @db.VarChar(256)
  client_secret               String?
  scope                       String[]                    @db.VarChar(128)
  force_pkce                  Boolean?
  additional_config           String?
  tenant_thirdparty_providers tenant_thirdparty_providers @relation(fields: [connection_uri_domain, app_id, tenant_id, third_party_id], references: [connection_uri_domain, app_id, tenant_id, third_party_id], onDelete: Cascade, onUpdate: NoAction, map: "tenant_thirdparty_provider_clients_third_party_id_fkey")

  @@id([connection_uri_domain, app_id, tenant_id, third_party_id, client_type])
  @@index([connection_uri_domain, app_id, tenant_id, third_party_id], map: "tenant_thirdparty_provider_clients_third_party_id_index")
}

model tenant_thirdparty_providers {
  connection_uri_domain                                String                               @default("") @db.VarChar(256)
  app_id                                               String                               @default("public") @db.VarChar(64)
  tenant_id                                            String                               @default("public") @db.VarChar(64)
  third_party_id                                       String                               @db.VarChar(28)
  name                                                 String?                              @db.VarChar(64)
  authorization_endpoint                               String?
  authorization_endpoint_query_params                  String?
  token_endpoint                                       String?
  token_endpoint_body_params                           String?
  user_info_endpoint                                   String?
  user_info_endpoint_query_params                      String?
  user_info_endpoint_headers                           String?
  jwks_uri                                             String?
  oidc_discovery_endpoint                              String?
  require_email                                        Boolean?
  user_info_map_from_id_token_payload_user_id          String?                              @db.VarChar(64)
  user_info_map_from_id_token_payload_email            String?                              @db.VarChar(64)
  user_info_map_from_id_token_payload_email_verified   String?                              @db.VarChar(64)
  user_info_map_from_user_info_endpoint_user_id        String?                              @db.VarChar(64)
  user_info_map_from_user_info_endpoint_email          String?                              @db.VarChar(64)
  user_info_map_from_user_info_endpoint_email_verified String?                              @db.VarChar(64)
  tenant_thirdparty_provider_clients                   tenant_thirdparty_provider_clients[]
  tenant_configs                                       tenant_configs                       @relation(fields: [connection_uri_domain, app_id, tenant_id], references: [connection_uri_domain, app_id, tenant_id], onDelete: Cascade, onUpdate: NoAction, map: "tenant_thirdparty_providers_tenant_id_fkey")

  @@id([connection_uri_domain, app_id, tenant_id, third_party_id])
  @@index([connection_uri_domain, app_id, tenant_id], map: "tenant_thirdparty_providers_tenant_id_index")
}

model tenants {
  app_id                   String                     @default("public") @db.VarChar(64)
  tenant_id                String                     @default("public") @db.VarChar(64)
  created_at_time          BigInt?
  all_auth_recipe_users    all_auth_recipe_users[]
  emailverification_tokens emailverification_tokens[]
  key_value                key_value[]
  passwordless_devices     passwordless_devices[]
  session_info             session_info[]
  apps                     apps                       @relation(fields: [app_id], references: [app_id], onDelete: Cascade, onUpdate: NoAction)
  totp_used_codes          totp_used_codes[]
  user_roles               user_roles[]

  @@id([app_id, tenant_id])
  @@index([app_id], map: "tenants_app_id_index")
}

model user_last_active {
  app_id           String  @default("public") @db.VarChar(64)
  user_id          String  @db.VarChar(128)
  last_active_time BigInt?
  apps             apps    @relation(fields: [app_id], references: [app_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([app_id, user_id])
  @@index([app_id], map: "user_last_active_app_id_index")
}

model dashboard_user_sessions {
  app_id          String          @default("public") @db.VarChar(64)
  session_id      String          @db.Char(36)
  user_id         String          @db.Char(36)
  time_created    BigInt
  expiry          BigInt
  dashboard_users dashboard_users @relation(fields: [app_id, user_id], references: [app_id, user_id], onDelete: Cascade, map: "dashboard_user_sessions_user_id_fkey")

  @@id([app_id, session_id])
  @@index([expiry], map: "dashboard_user_sessions_expiry_index")
  @@index([app_id, user_id], map: "dashboard_user_sessions_user_id_index")
}

model dashboard_users {
  app_id                  String                    @default("public") @db.VarChar(64)
  user_id                 String                    @db.Char(36)
  email                   String                    @db.VarChar(256)
  password_hash           String                    @db.VarChar(256)
  time_joined             BigInt
  dashboard_user_sessions dashboard_user_sessions[]
  apps                    apps                      @relation(fields: [app_id], references: [app_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([app_id, user_id])
  @@unique([app_id, email], map: "dashboard_users_email_key")
  @@index([app_id], map: "dashboard_users_app_id_index")
}

model emailpassword_user_to_tenant {
  app_id                String                @default("public") @db.VarChar(64)
  tenant_id             String                @default("public") @db.VarChar(64)
  user_id               String                @db.Char(36)
  email                 String                @db.VarChar(256)
  all_auth_recipe_users all_auth_recipe_users @relation(fields: [app_id, tenant_id, user_id], references: [app_id, tenant_id, user_id], onDelete: Cascade, onUpdate: NoAction, map: "emailpassword_user_to_tenant_user_id_fkey")

  @@id([app_id, tenant_id, user_id])
  @@unique([app_id, tenant_id, email], map: "emailpassword_user_to_tenant_email_key")
}

model passwordless_user_to_tenant {
  app_id                String                @default("public") @db.VarChar(64)
  tenant_id             String                @default("public") @db.VarChar(64)
  user_id               String                @db.Char(36)
  email                 String?               @db.VarChar(256)
  phone_number          String?               @db.VarChar(256)
  all_auth_recipe_users all_auth_recipe_users @relation(fields: [app_id, tenant_id, user_id], references: [app_id, tenant_id, user_id], onDelete: Cascade, onUpdate: NoAction, map: "passwordless_user_to_tenant_user_id_fkey")

  @@id([app_id, tenant_id, user_id])
  @@unique([app_id, tenant_id, email], map: "passwordless_user_to_tenant_email_key")
  @@unique([app_id, tenant_id, phone_number], map: "passwordless_user_to_tenant_phone_number_key")
}

model thirdparty_user_to_tenant {
  app_id                String                @default("public") @db.VarChar(64)
  tenant_id             String                @default("public") @db.VarChar(64)
  user_id               String                @db.Char(36)
  third_party_id        String                @db.VarChar(28)
  third_party_user_id   String                @db.VarChar(256)
  all_auth_recipe_users all_auth_recipe_users @relation(fields: [app_id, tenant_id, user_id], references: [app_id, tenant_id, user_id], onDelete: Cascade, onUpdate: NoAction, map: "thirdparty_user_to_tenant_user_id_fkey")

  @@id([app_id, tenant_id, user_id])
  @@unique([app_id, tenant_id, third_party_id, third_party_user_id], map: "thirdparty_user_to_tenant_third_party_user_id_key")
}

model totp_used_codes {
  app_id          String     @default("public") @db.VarChar(64)
  tenant_id       String     @default("public") @db.VarChar(64)
  user_id         String     @db.VarChar(128)
  code            String     @db.VarChar(8)
  is_valid        Boolean
  expiry_time_ms  BigInt
  created_time_ms BigInt
  tenants         tenants    @relation(fields: [app_id, tenant_id], references: [app_id, tenant_id], onDelete: Cascade, onUpdate: NoAction, map: "totp_used_codes_tenant_id_fkey")
  totp_users      totp_users @relation(fields: [app_id, user_id], references: [app_id, user_id], onDelete: Cascade, onUpdate: NoAction, map: "totp_used_codes_user_id_fkey")

  @@id([app_id, tenant_id, user_id, created_time_ms])
  @@index([app_id, tenant_id, expiry_time_ms], map: "totp_used_codes_expiry_time_ms_index")
  @@index([app_id, tenant_id], map: "totp_used_codes_tenant_id_index")
  @@index([app_id, user_id], map: "totp_used_codes_user_id_index")
}

model totp_user_devices {
  app_id      String     @default("public") @db.VarChar(64)
  user_id     String     @db.VarChar(128)
  device_name String     @db.VarChar(256)
  secret_key  String     @db.VarChar(256)
  period      Int
  skew        Int
  verified    Boolean
  totp_users  totp_users @relation(fields: [app_id, user_id], references: [app_id, user_id], onDelete: Cascade, onUpdate: NoAction, map: "totp_user_devices_user_id_fkey")

  @@id([app_id, user_id, device_name])
  @@index([app_id, user_id], map: "totp_user_devices_user_id_index")
}

model totp_users {
  app_id            String              @default("public") @db.VarChar(64)
  user_id           String              @db.VarChar(128)
  totp_used_codes   totp_used_codes[]
  totp_user_devices totp_user_devices[]
  apps              apps                @relation(fields: [app_id], references: [app_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([app_id, user_id])
  @@index([app_id], map: "totp_users_app_id_index")
}
