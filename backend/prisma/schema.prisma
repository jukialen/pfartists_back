generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                  String              @db.Char(36) @id
  username            String?             @db.VarChar(20)
  pseudonym           String?             @db.VarChar(30) @unique
  description         String?             @db.VarChar(300)
  profilePhoto        String?             @db.VarChar(200) @unique
  updateAt            DateTime            @updatedAt
  plan                Plan                @default(FREE)
  emailpassword_users emailpassword_users @relation(fields: [id], references: [user_id])
  owner               Groups?             @relation("owner")
  moderator           Groups[]            @relation("moderator")
  user                Groups[]
  profile             Files?              @relation("profile")
  ownerFile           Files?              @relation("ownerFile")
  friend              Friends[]
  userInFriend        Friends[]           @relation("usersFriends")
}

model Groups {
  groupId      String   @default(uuid()) @id
  name         String   @db.VarChar(20) @unique
  description  String   @db.VarChar(300)
  adminId      String   @db.VarChar(36) @unique
  moderatorsId String?  @db.VarChar(36)
  usersId      String?  @db.VarChar(36)
  logoUrl      String?  @db.VarChar(36)
  createAt     DateTime @default(now())
  updateAt     DateTime @updatedAt
  owner        Users    @relation("owner", fields: [adminId], references: [id])
  moderator    Users?   @relation("moderator", fields: [moderatorsId], references: [id])
  user         Users?   @relation(fields: [usersId], references: [id])
}

model Friends {
  id           String   @default(uuid()) @id
  usernameId   String   @db.VarChar(80)
  friendId     String   @db.VarChar(80)
  favorite     Boolean  @default(false)
  createAt     DateTime @default(now())
  updateAt     DateTime @updatedAt
  friend       Users    @relation(fields: [friendId], references: [id])
  usersFriends Users    @relation("usersFriends", fields: [usernameId], references: [id])
}

model Files {
  id          String   @default(uuid()) @id
  name        String   @db.VarChar(120) @unique
  ownerFile   String   @db.VarChar(80) @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  profileType Boolean  @default(false)
  profile     Users    @relation("profile", fields: [id], references: [profilePhoto])
  owner       Users    @relation("ownerFile", fields: [ownerFile], references: [id])
}

model all_auth_recipe_users {
  user_id        String          @db.Char(36) @id
  recipe_id      String          @db.VarChar(128)
  time_joined    BigInt
  userid_mapping userid_mapping?

  @@index([time_joined(sort: Desc), user_id(sort: Desc)], map: "all_auth_recipe_users_pagination_index")
}

model emailpassword_pswd_reset_tokens {
  user_id             String              @db.Char(36)
  token               String              @unique @db.VarChar(128)
  token_expiry        BigInt
  emailpassword_users emailpassword_users @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@id([user_id, token])
  @@index([token_expiry], map: "emailpassword_password_reset_token_expiry_index")
}

model emailpassword_users {
  user_id                         String                            @db.Char(36) @id
  email                           String                            @db.VarChar(256) @unique
  password_hash                   String                            @db.VarChar(256)
  time_joined                     BigInt
  emailpassword_pswd_reset_tokens emailpassword_pswd_reset_tokens[]
  users                           Users?
}

model emailverification_tokens {
  user_id      String @db.VarChar(128)
  email        String @db.VarChar(256)
  token        String @db.VarChar(128) @unique
  token_expiry BigInt

  @@id([user_id, email, token])
  @@index([token_expiry], map: "emailverification_tokens_index")
}

model emailverification_verified_emails {
  user_id String @db.VarChar(128)
  email   String @db.VarChar(256)

  @@id([user_id, email])
}

model jwt_signing_keys {
  key_id     String  @db.VarChar(255) @id
  key_string String
  algorithm  String  @db.VarChar(10)
  created_at BigInt?
}

model key_value {
  name            String  @db.VarChar(128) @id
  value           String?
  created_at_time BigInt?
}

model passwordless_codes {
  code_id              String               @db.Char(36) @id
  device_id_hash       String               @db.Char(44)
  link_code_hash       String               @db.Char(44) @unique
  created_at           BigInt
  passwordless_devices passwordless_devices @relation(fields: [device_id_hash], references: [device_id_hash], onDelete: Cascade)

  @@index([created_at], map: "passwordless_codes_created_at_index")
  @@index([device_id_hash], map: "passwordless_codes_device_id_hash_index")
}

model passwordless_devices {
  device_id_hash     String               @db.Char(44) @id
  email              String?              @db.VarChar(256)
  phone_number       String?              @db.VarChar(256)
  link_code_salt     String               @db.Char(44)
  failed_attempts    Int
  passwordless_codes passwordless_codes[]

  @@index([email], map: "passwordless_devices_email_index")
  @@index([phone_number], map: "passwordless_devices_phone_number_index")
}

model passwordless_users {
  user_id      String  @db.Char(36) @id
  email        String? @db.VarChar(256) @unique
  phone_number String? @db.VarChar(256) @unique
  time_joined  BigInt
}

model role_permissions {
  role       String @db.VarChar(255)
  permission String @db.VarChar(255)
  roles      roles  @relation(fields: [role], references: [role], onDelete: Cascade, onUpdate: NoAction)

  @@id([role, permission])
  @@index([permission], map: "role_permissions_permission_index")
}

model roles {
  role             String             @db.VarChar(255) @id
  role_permissions role_permissions[]
  user_roles       user_roles[]
}

model session_access_token_signing_keys {
  created_at_time BigInt  @id
  value           String?
}

model session_info {
  session_handle       String  @db.VarChar(255) @id
  user_id              String  @db.VarChar(128)
  refresh_token_hash_2 String  @db.VarChar(128)
  session_data         String?
  expires_at           BigInt
  created_at_time      BigInt
  jwt_user_payload     String?
}

model thirdparty_users {
  third_party_id      String @db.VarChar(28)
  third_party_user_id String @db.VarChar(256)
  user_id             String @db.Char(36) @unique
  email               String @db.VarChar(256)
  time_joined         BigInt

  @@id([third_party_id, third_party_user_id])
}

model user_metadata {
  user_id       String @db.VarChar(128) @id
  user_metadata String
}

model user_roles {
  user_id String @db.VarChar(128)
  role    String @db.VarChar(255)
  roles   roles  @relation(fields: [role], references: [role], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, role])
  @@index([role], map: "user_roles_role_index")
}

model userid_mapping {
  supertokens_user_id   String                @db.Char(36) @unique
  external_user_id      String                @db.VarChar(128) @unique
  external_user_id_info String?
  all_auth_recipe_users all_auth_recipe_users @relation(fields: [supertokens_user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([supertokens_user_id, external_user_id])
}

enum Plan {
  FREE
  PREMIUM
  GOLD
}

enum Tags {
  realistic
  manga
  anime
  comics
  photographs
  videos
  animations
  others
  profile
}

model Roles {
  roleId              String                @id @default(uuid())
  type                Role                  @unique
  usersGroups         UsersGroups[]
  groupsPosts         GroupsPosts[]
  postsComments       PostsComments[]
  commentsSubComments CommentsSubComments[]
  lastComSubCom       LastComSubCom[]
}

model Users {
  id                    String                @id
  username              String?               @db.VarChar(20)
  pseudonym             String?               @unique @db.VarChar(30)
  description           String?               @db.VarChar(300)
  profilePhoto          String?               @unique @db.VarChar(200)
  updatedAt             DateTime              @updatedAt
  plan                  Plan                  @default(FREE)
  profile               Files?                @relation("profile")
  files                 Files[]
  friends               Friends[]
  userAsFriend          Friends[]             @relation("usersFriends")
  usersGroups           UsersGroups[]
  all_auth_recipe_users all_auth_recipe_users @relation(fields: [id], references: [user_id])
  postsComments         PostsComments[]
  commentsSubComments   CommentsSubComments[]
  groupsPosts           GroupsPosts[]
  Liked                 Liked[]
  // emailpassword_users   emailpassword_users[]
}

model Friends {
  id           String   @id @default(uuid())
  usernameId   String   @db.VarChar(80)
  friendId     String   @db.VarChar(80)
  favorite     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  friends      Users    @relation(fields: [friendId], references: [id])
  userAsFriend Users    @relation("usersFriends", fields: [usernameId], references: [id])
}

model Files {
  fileId      String   @id @default(uuid())
  name        String   @unique @db.VarChar(120)
  profileType Boolean  @default(false)
  tags        Tags
  userId      String   @db.VarChar(36)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  profile     Users    @relation(fields: [name], references: [profilePhoto], "profile")
  users       Users    @relation(fields: [userId], references: [id])
}

model Groups {
  groupId     String        @id @default(uuid())
  name        String        @unique @db.VarChar(20)
  description String        @db.VarChar(300)
  regulation  String?       @db.VarChar(1000)
  logo        String?       @db.VarChar(36)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  usersGroups UsersGroups[]
  groupsPosts GroupsPosts[]
}

model UsersGroups {
  usersGroupsId String   @id @default(uuid())
  name          String   @db.VarChar(20)
  groupId       String   @db.VarChar(36)
  userId        String   @db.VarChar(36)
  roleId        String   @db.VarChar(36)
  favorite      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  users         Users    @relation(fields: [userId], references: [id])
  groups        Groups   @relation(fields: [groupId], references: [groupId])
  roles         Roles[]
}

model Posts {
  postId      String          @id @default(uuid())
  title       String          @unique @db.VarChar(80)
  content     String          @db.VarChar(400)
  commented   Int             @default(0)
  likes       Int             @default(0)
  shared      Int             @default(0)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  groupsPosts GroupsPosts[]
  comments    PostsComments[]
}

model GroupsPosts {
  groupsPostsId String   @id @default(uuid())
  groupId       String   @db.VarChar(36)
  postId        String   @unique @db.VarChar(36)
  authorId      String   @db.VarChar(36)
  roleId        String   @db.VarChar(36)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  groups        Groups   @relation(fields: [groupId], references: [groupId])
  posts         Posts    @relation(fields: [postId], references: [postId])
  users         Users    @relation(fields: [authorId], references: [id])
  roles         Roles[]
  liked         Liked[]
}

model Liked {
  id          String      @id @default(uuid())
  postId      String      @db.VarChar(36)
  userId      String      @db.VarChar(36)
  groupsPosts GroupsPosts @relation(fields: [postId], references: [postId])
  users       Users[]
}

model Comments {
  commentId           String                @id @default(uuid())
  comment             String                @db.VarChar(1000)
  authorId            String                @db.VarChar(36)
  postId              String                @db.VarChar(36)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  postsComments       PostsComments[]
  commentsSubComments CommentsSubComments[]
}

model PostsComments {
  id        String   @id @default(uuid())
  postId    String   @db.VarChar(36)
  authorId  String   @db.VarChar(36)
  commentId String   @unique @db.VarChar(36)
  roleId    String   @db.VarChar(36)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  commets   Comments @relation(fields: [commentId], references: [commentId])
  posts     Posts    @relation(fields: [postId], references: [postId])
  authors   Users    @relation(fields: [authorId], references: [id])
  roles     Roles[]
}

model SubComments {
  subCommentId        String                @id @default(uuid())
  commentId           String                @db.VarChar(36)
  subComment          String                @db.VarChar(1000)
  authorId            String                @db.VarChar(36)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  commentsSubComments CommentsSubComments[]
  lastComSubCom       LastComSubCom[]
}

model CommentsSubComments {
  id           String      @id @default(uuid())
  commentId    String      @db.VarChar(36)
  subCommentId String      @db.VarChar(36)
  authorId     String      @db.VarChar(36)
  roleId       String      @db.VarChar(36)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  comments     Comments    @relation(fields: [commentId], references: [commentId])
  subComments  SubComments @relation(fields: [subCommentId], references: [subCommentId])
  authors      Users       @relation(fields: [authorId], references: [id])
  roles        Roles[]
}

model LastComments {
  lastCommentId String          @id @default(uuid())
  subCommentId  String          @db.VarChar(36)
  lastComment   String          @db.VarChar(1000)
  authorId      String          @db.VarChar(36)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  lastComSubCom LastComSubCom[]
}

model LastComSubCom {
  id            String       @id @default(uuid())
  lastCommentId String       @db.VarChar(36)
  subCommentId  String       @db.VarChar(36)
  authorId      String       @db.VarChar(36)
  roleId        String       @db.VarChar(36)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  lastComments  LastComments @relation(fields: [lastCommentId], references: [lastCommentId])
  subComments   SubComments  @relation(fields: [subCommentId], references: [subCommentId])
  roles         Roles[]
}

model all_auth_recipe_users {
  user_id        String          @id @db.Char(36)
  recipe_id      String          @db.VarChar(128)
  time_joined    BigInt
  userid_mapping userid_mapping?
  users          Users?

  @@index([time_joined(sort: Desc), user_id(sort: Desc)], map: "all_auth_recipe_users_pagination_index")
}

model emailpassword_pswd_reset_tokens {
  user_id             String              @db.Char(36)
  token               String              @unique @db.VarChar(128)
  token_expiry        BigInt
  emailpassword_users emailpassword_users @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@id([user_id, token])
  @@index([token_expiry], map: "emailpassword_password_reset_token_expiry_index")
}

model emailpassword_users {
  user_id                         String                            @id @db.Char(36)
  email                           String                            @unique @db.VarChar(256)
  password_hash                   String                            @db.VarChar(256)
  time_joined                     BigInt
  // users                           Users?                            @relation(fields: [usersId], references: [id])
  emailpassword_pswd_reset_tokens emailpassword_pswd_reset_tokens[]
  // usersId                          String?
}

model emailverification_tokens {
  user_id      String @db.VarChar(128)
  email        String @db.VarChar(256)
  token        String @unique @db.VarChar(128)
  token_expiry BigInt

  @@id([user_id, email, token])
  @@index([token_expiry], map: "emailverification_tokens_index")
}

model emailverification_verified_emails {
  user_id String @db.VarChar(128)
  email   String @db.VarChar(256)

  @@id([user_id, email])
}

model jwt_signing_keys {
  key_id     String  @id @db.VarChar(255)
  key_string String
  algorithm  String  @db.VarChar(10)
  created_at BigInt?
}

model key_value {
  name            String  @id @db.VarChar(128)
  value           String?
  created_at_time BigInt?
}

model passwordless_codes {
  code_id              String               @id @db.Char(36)
  device_id_hash       String               @db.Char(44)
  link_code_hash       String               @unique @db.Char(44)
  created_at           BigInt
  passwordless_devices passwordless_devices @relation(fields: [device_id_hash], references: [device_id_hash], onDelete: Cascade)

  @@index([created_at], map: "passwordless_codes_created_at_index")
  @@index([device_id_hash], map: "passwordless_codes_device_id_hash_index")
}

model passwordless_devices {
  device_id_hash     String               @id @db.Char(44)
  email              String?              @db.VarChar(256)
  phone_number       String?              @db.VarChar(256)
  link_code_salt     String               @db.Char(44)
  failed_attempts    Int
  passwordless_codes passwordless_codes[]

  @@index([email], map: "passwordless_devices_email_index")
  @@index([phone_number], map: "passwordless_devices_phone_number_index")
}

model passwordless_users {
  user_id      String  @id @db.Char(36)
  email        String? @unique @db.VarChar(256)
  phone_number String? @unique @db.VarChar(256)
  time_joined  BigInt
}

model role_permissions {
  role       String @db.VarChar(255)
  permission String @db.VarChar(255)
  roles      roles  @relation(fields: [role], references: [role], onDelete: Cascade, onUpdate: NoAction)

  @@id([role, permission])
  @@index([permission], map: "role_permissions_permission_index")
}

model roles {
  role             String             @id @db.VarChar(255)
  role_permissions role_permissions[]
  user_roles       user_roles[]
}

model session_access_token_signing_keys {
  created_at_time BigInt  @id
  value           String?
}

model session_info {
  session_handle       String  @id @db.VarChar(255)
  user_id              String  @db.VarChar(128)
  refresh_token_hash_2 String  @db.VarChar(128)
  session_data         String?
  expires_at           BigInt
  created_at_time      BigInt
  jwt_user_payload     String?
}

model thirdparty_users {
  third_party_id      String @db.VarChar(28)
  third_party_user_id String @db.VarChar(256)
  user_id             String @unique @db.Char(36)
  email               String @db.VarChar(256)
  time_joined         BigInt

  @@id([third_party_id, third_party_user_id])
}

model user_metadata {
  user_id       String @id @db.VarChar(128)
  user_metadata String
}

model user_roles {
  user_id String @db.VarChar(128)
  role    String @db.VarChar(255)
  roles   roles  @relation(fields: [role], references: [role], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, role])
  @@index([role], map: "user_roles_role_index")
}

model userid_mapping {
  supertokens_user_id   String                @unique @db.Char(36)
  external_user_id      String                @unique @db.VarChar(128)
  external_user_id_info String?
  all_auth_recipe_users all_auth_recipe_users @relation(fields: [supertokens_user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([supertokens_user_id, external_user_id])
}
